# -*- coding: utf-8 -*-
"""Violation.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1hSokAI5W8XTl5Z0qc6Jq-HWFSIlcFXgi
"""

import pandas as pd
import datetime as dt
from bokeh.io import curdoc
from bokeh.plotting import figure
from bokeh.models import HoverTool, ColumnDataSource
from bokeh.models import CategoricalColorMapper
from bokeh.palettes import Spectral6
from bokeh.layouts import widgetbox, row, gridplot
from bokeh.models import DateRangeSlider, Select
from bokeh.models.widgets import Tabs, Panel

data = pd.read_csv('Parking_Violation_Tickets.csv')

data['Issue_Date']= pd.to_datetime(data['Issue_Date']).dt.date
data["Violation_Code"] = data["Violation_Code"].astype(str)

violation = data[['Violation_Code', 'Issue_Date', 'Violation_Location', 'Violation_Precinct']].groupby(['Violation_Code', 'Issue_Date']).sum().reset_index()
street = data[['Violation_Code', 'Issue_Date', 'Street_Code1', 'Street_Code2', 'Street_Code3']].groupby(['Violation_Code', 'Issue_Date']).sum().reset_index()
grouped = data[['Violation_Code', 'Violation_Location', 'Violation_Precinct']].groupby(['Violation_Code']).sum().sort_values(by='Violation_Location', ascending=False).head(5)

ints = violation['Violation_Code'].value_counts().sort_index().index.tolist()
ints_street = street['Violation_Code'].value_counts().sort_index().index.tolist()

source = ColumnDataSource(data={
    'Violation_Code'          : violation[violation['Violation_Code'] == 7]['Violation_Code'],
    'Issue_Date'              : violation[violation['Violation_Code'] == 7]['Issue_Date'],
    'Violation_Location'      : violation[violation['Violation_Code'] == 7]['Violation_Location'],
    'Violation_Precinct'      : violation[violation['Violation_Code'] == 7]['Violation_Precinct'],
})

source_street = ColumnDataSource(data={
    'Violation_Code'     : street[street['Violation_Code'] == 7]['Violation_Code'],
    'Issue_Date'         : street[street['Violation_Code'] == 7]['Issue_Date'],
    'Street_Code1'       : street[street['Violation_Code'] == 7]['Street_Code1'],
    'Street_Code2'       : street[street['Violation_Code'] == 7]['Street_Code2'],
    'Street_Code3'       : street[street['Violation_Code'] == 7]['Street_Code3'],
})

source_top_violation = ColumnDataSource(grouped)
Violation_Code = source_top_violation.data['Violation_Code'].tolist()

tooltips_violation = [
            ('Violation Code', '@Violation_Code'),
            ('Issue Date', '@Issue_Date{%F}'),
            ('Violation Location', '@Violation_Location'),
            ('Violation Precinct', '@Violation_Precinct'),  
           ]

tooltips_street = [
            ('Violation Code', '@Violation_Code'),
            ('Issue Date', '@Issue_Date{%F}'),
            ('Street Code1', '@Street_Code1'),
            ('Street Code2', '@Street_Code2'),
            ('Street Code3', '@Street_Code3'),  
           ]

tooltips_violation_vbar = [
            ('Violation Code', '@Violation_Code'),
            ('Violation Location', '@Violation_Location'),
            ('Violation Precinct', '@Violation_Precinct'),  
           ]

fig_violation = figure(x_axis_type='datetime',
             plot_height=500, plot_width=1000,
             title='Violation 7 Total Location in 2016',
             x_axis_label='Issue Date', y_axis_label='Violation Location')

fig_street = figure(x_axis_type='datetime',
             plot_height=500, plot_width=1000,
             title='Violation 7 Total Street in 2016',
             x_axis_label='Date', y_axis_label='Total Street')

fig_violation_vbar = figure(plot_height=500, plot_width=500,
                title='Top 5 Violation by Total Location in 2016', x_range=Violation_Code,
                x_axis_label='Violation Code', y_axis_label='Total Location',
                toolbar_location=None)

fig_violation.add_tools(HoverTool(tooltips=tooltips_violation, formatters={'@Issue_Date': 'datetime'}))

fig_street.add_tools(HoverTool(tooltips=tooltips_street, formatters={'@Issue_Date': 'datetime'}))

fig_violation_vbar.add_tools(HoverTool(tooltips=tooltips_violation_vbar))

fig_violation.line('Issue_Date', 'Violation_Location', 
         color='#CE1141', 
         source=source)

fig_street.line('Issue_Date', 'Street_Code1', 
         color='#000000', 
         source=source_street)

fig_violation_vbar.vbar(x='Violation_Code', top='Violation_Location', source=source_top_violation, width=0.50)

fig = figure(x_axis_type='datetime',
            plot_height=500, plot_width=800,
            title='Trend of Top 5 Violation by Total Location in 2016',
            x_axis_label='Issue Date', y_axis_label='Violation Location',
            toolbar_location=None)

color_list = ['#212121', '#b83b5e', '#3fc1c9', '#3490de', '#f9ed69']
idx = 0
for i in grouped.index:
    i = int(i)
    source_ = ColumnDataSource(data={
        'Violation_Code'          : violation[violation['Violation_Code'] == i]['Violation_Code'],
        'Issue_Date'              : violation[violation['Violation_Code'] == i]['Issue_Date'],
        'Violation_Location'      : violation[violation['Violation_Code'] == i]['Violation_Location'],
        'Violation_Precinct'      : violation[violation['Violation_Code'] == i]['Violation_Precinct'],
    })

    fig.line('Issue_Date', 'Violation_Location', 
         color=color_list[idx], legend_label='Violation'+str(i), 
         source=source_, muted_alpha=0.1)
    
    idx += 1

fig.legend.location = 'top_left'
fig.legend.click_policy = 'mute'
                                   
violation_gridplot = gridplot([[fig_violation_vbar, fig]], toolbar_location='right')

def update_violation(attr, old, new):

    [start, end] = slider.value
    date_from = dt.datetime.fromtimestamp(start/1000.0).date()
    date_until = dt.datetime.fromtimestamp(end/1000.0).date()

    violation_cd = int(violation_select.value)

    # new data
    violation_date = violation[(violation['Issue_Date'] >= date_from) & (violation['Issue_Date'] <= date_until)]
    new_data = {
        'Violation_Code'       : violation_date[violation_date['Violation_Code'] == violation_cd]['Violation_Code'],
        'Issue_Date'           : violation_date[violation_date['Violation_Code'] == violation_cd]['Issue_Date'],
        'Violation_Location'   : violation_date[violation_date['Violation_Code'] == violation_cd]['Violation_Location'],
        'Violation_Precinct'   : violation_date[violation_date['Violation_Code'] == violation_cd]['Violation_Precinct'],
    }
    source.data = new_data

    fig_violation.title.text = 'Total Location Violation '+violation_select.value+ ' in 2016'


init_value = (data['Issue_Date'].min(), data['Issue_Date'].max())
slider = DateRangeSlider(start=init_value[0], end=init_value[1], value=init_value)
slider.on_change('value',update_violation)

violation_select = Select(
    options= [str(x) for x in ints],
    value= '7',
    title='Violation Code'
)
violation_select.on_change('value', update_violation)

def update_street(attr, old, new):

    [start, end] = slider_street.value
    date_from = dt.datetime.fromtimestamp(start/1000.0).date()
    date_until = dt.datetime.fromtimestamp(end/1000.0).date()

    street_cd = int(street_select.value)

    # new data
    street_date = street[(street['Issue_Date'] >= date_from) & (street['Issue_Date'] <= date_until)]
    new_data = {
        'Violation_Code'    : street_date[street_date['Violation_Code'] == street_cd]['Violation_Code'],
        'Issue_Date'        : street_date[street_date['Violation_Code'] == street_cd]['Issue_Date'],
        'Street_Code1'      : street_date[street_date['Violation_Code'] == street_cd]['Street_Code1'],
        'Street_Code2'      : street_date[street_date['Violation_Code'] == street_cd]['Street_Code2'],
        'Street_Code3'      : street_date[street_date['Violation_Code'] == street_cd]['Street_Code3'],
    }
    source_street.data = new_data

    fig_street.title.text = 'Total Violation in Street '+street_select.value+ ' in 2016'

slider_street = DateRangeSlider(start=init_value[0], end=init_value[1], value=init_value)
slider_street.on_change('value',update_street)

street_select = Select(
    options= [str(x) for x in ints_street],
    value= '7',
    title='Violation Code'
)
street_select.on_change('value', update_street)

# Create layout and add to current document
layout = row(widgetbox(violation_select, slider), fig_violation)
layout_street = row(widgetbox(street_select, slider_street), fig_street)

first_panel = Panel(child=layout, title='Violation\'s by Location')
second_panel = Panel(child=layout_street, title='violation\'s by Street')
third_panel = Panel(child=violation_gridplot, title='Top violation\'s by Location')

tabs = Tabs(tabs=[first_panel, second_panel, third_panel])

curdoc().add_root(tabs)